{"version":3,"sources":["../node_modules/tsup/assets/esm_shims.js","../src/index.ts","../src/hermes/test.ts","../src/utilities/constant.ts","../src/utilities/helpers.ts","../src/utilities/modifier/simply-result.ts","../src/utilities/writer/write-conflict.ts","../src/utilities/opeai-talker/index.ts","../src/utilities/opeai-talker/prompt.ts","../src/utilities/reader/read-prompt-file.ts","../src/utilities/extractor/extract-code-prompts.ts","../src/utilities/opeai-talker/send-message.ts","../src/hermes/base.ts","../src/utilities/webhook/index.ts","../src/hermes/review.ts","../src/hermes/create.ts","../src/hermes/modify.ts","../src/hermes/translate.ts","../src/utilities/creator/index.ts","../src/utilities/creator/code-generator.ts","../src/utilities/creator/constant.ts","../src/utilities/modifier/index.ts","../src/utilities/reader/index.ts","../src/utilities/reader/reader-directory.ts","../src/utilities/reader/reader-git-stage.ts","../src/utilities/extractor/extract-modify-funcs.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","import 'isomorphic-fetch';\n\nimport { HermesReview, HermesTest, HermesTranslate } from './hermes';\nimport { userOptions } from './utilities/constant';\nimport CreateCLI from './utilities/creator';\nimport ModifyCLI from './utilities/modifier';\nimport ReadFiles from './utilities/reader';\nimport { HermesTypeEnum, IUserOptions, ReadTypeEnum } from './utilities/types';\n\nconst runMap: Record<HermesTypeEnum, () => void> = {\n  [HermesTypeEnum.Test]: async () => {\n    const testFilePaths = new ReadFiles();\n    const files = testFilePaths.getFileResults();\n    const hermes = new HermesTest();\n\n    for (const fileResult of files) {\n      await hermes.run(fileResult);\n    }\n  },\n  [HermesTypeEnum.Review]: async () => {\n    const reviewFiles = new ReadFiles();\n    const files = reviewFiles.getFileResults();\n    const hermes = new HermesReview();\n\n    for (const fileResult of files) {\n      await hermes.run(fileResult);\n    }\n    hermes.publishNotice();\n  },\n  [HermesTypeEnum.Create]: async () => {\n    const cli = new CreateCLI();\n\n    await cli.start();\n  },\n  [HermesTypeEnum.Modify]: async () => {\n    const reviewFiles = new ReadFiles();\n    const files = reviewFiles.getFileResults();\n    if (!files.length) return;\n\n    const cli = new ModifyCLI(files);\n    await cli.start();\n  },\n  [HermesTypeEnum.Translate]: async () => {\n    const testFilePaths = new ReadFiles({ fileExtensions: [] });\n    const files = testFilePaths.getFileResults(ReadTypeEnum.Directory);\n    const hermes = new HermesTranslate();\n\n    for (const fileResult of files) {\n      await hermes.run(fileResult);\n    }\n  },\n};\n\nexport function main(options?: IUserOptions) {\n  userOptions.init(options);\n  const type = userOptions.hermesType;\n\n  if (!runMap[type]) throw new Error('Invalid hermesType: ' + type);\n\n  if (userOptions.options.debug) {\n    console.log(\n      'Running hermes with options: ',\n      JSON.stringify(userOptions.options),\n    );\n  }\n\n  runMap[type]();\n}\n\nexport default main;\n","import fs from 'fs';\nimport path from 'path';\nimport { userOptions } from 'src/utilities/constant';\nimport { makeDirExist } from 'src/utilities/helpers';\nimport { getAllCodeBlock } from 'src/utilities/modifier/simply-result';\nimport { IReadFileResult } from 'src/utilities/types';\nimport getConflictResult from 'src/utilities/writer/write-conflict';\n\nimport HermesBase from './base';\n\nclass HermesTest extends HermesBase {\n  private getFileNameWithoutExtension(filePath: string): string {\n    return path.basename(filePath, path.extname(filePath));\n  }\n\n  private getFileExtension(filePath: string): string {\n    return path.extname(filePath);\n  }\n\n  private async writeTestMessageToFile(\n    { filePath, fileContent }: IReadFileResult,\n    message: string,\n  ): Promise<void> {\n    try {\n      const testFileDirName = userOptions.options.testFileDirName;\n      if (!testFileDirName) throw new Error('testFileDirName is not set');\n\n      const dirPath = path.join(path.dirname(filePath), testFileDirName);\n      const fileName = `${this.getFileNameWithoutExtension(filePath)}.${\n        userOptions.options.testFileType\n      }${this.getFileExtension(filePath)}`;\n      const testFilePath = path.join(dirPath, fileName);\n\n      makeDirExist(dirPath);\n\n      if (!fs.existsSync(testFilePath)) {\n        return fs.writeFileSync(testFilePath, message);\n      }\n\n      const sourceFileContent = fs.readFileSync(filePath, 'utf-8');\n      if (fileContent !== sourceFileContent) {\n        const testFileContent = fs.readFileSync(testFilePath, 'utf-8');\n        return fs.writeFileSync(\n          testFilePath,\n          `${testFileContent}\\n${message}\\n`,\n        );\n      }\n\n      return fs.writeFileSync(\n        testFilePath,\n        getConflictResult(fileContent, message),\n      );\n    } catch (error) {\n      console.error('Error writing message to file:', error);\n    }\n  }\n\n  public async run(fileResult: IReadFileResult): Promise<string> {\n    this.openai.resetParentMessage();\n    const message = await this.openai.run(fileResult);\n    if (!message?.length) return;\n\n    const extractTestsCode = message\n      .map((m) => getAllCodeBlock(m))\n      .join('\\n\\n');\n    await this.writeTestMessageToFile(fileResult, extractTestsCode);\n\n    return extractTestsCode;\n  }\n}\n\nexport default HermesTest;\n","import { ChatGPTAPIOptions } from 'chatgpt';\nimport { execSync } from 'child_process';\nimport { config } from 'dotenv';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { HermesTypeEnum, IUserOptions, ReadTypeEnum } from './types';\n\nexport const OPENAI_API_KEY_NAME = 'OPENAI_API_KEY';\nexport const OPENAI_SESSION_TOKEN_NAME = 'OPENAI_SESSION_TOKEN';\n\nexport const OPENAI_MAX_RETRY = 3;\nexport const OPENAI_MAX_CONTINUES = 5;\n\nconst DEFAULT_MODELS = {\n  apiModel: 'gpt-3.5-turbo',\n  proxyModel: 'text-davinci-002-render-sha',\n};\n\nexport const ROOT_SRC_DIR_PATH = __dirname;\n\nclass UserOptionsClass {\n  options: IUserOptions;\n\n  private userOptionsDefault: IUserOptions = {\n    debug: false,\n    hermesType: HermesTypeEnum.Review,\n    openAIModel: '',\n    openAIProxyUrl: 'https://bypass.churchless.tech/api/conversation',\n    openAIMaxTokens: 4096,\n    readType: ReadTypeEnum.GitStage,\n    readGitStatus: 'R, M, A',\n    readFilesRootName: 'src',\n    readFileExtensions: '.ts,.tsx',\n    testFileType: 'test',\n    testFileDirName: '__test__',\n    reviewReportWebhook: '',\n    translate: 'zh,en',\n  };\n\n  get hermesType(): HermesTypeEnum {\n    if (!this.options.hermesType) throw new Error('hermesType is not set');\n    return this.options.hermesType;\n  }\n\n  private getOpenAIKeyFromNpmConfig(key: string): string {\n    try {\n      return execSync(`npm config get ${key}`).toString().trim();\n    } catch (error) {\n      return '';\n    }\n  }\n\n  get openAIKey(): string {\n    if (!this.options.openAIKey) {\n      this.options.openAIKey =\n        this.getOpenAIKeyFromNpmConfig(OPENAI_API_KEY_NAME);\n    }\n\n    if (!this.options.openAIKey) throw new Error('openAIKey is not set');\n\n    if (process.env.DEBUG)\n      console.log(`openAI key: \"${this.options.openAIKey}\"`);\n\n    return this.options.openAIKey;\n  }\n\n  get openAISessionToken(): string {\n    if (!this.options.openAISessionToken) {\n      this.options.openAISessionToken = this.getOpenAIKeyFromNpmConfig(\n        OPENAI_SESSION_TOKEN_NAME,\n      );\n    }\n\n    return this.options.openAISessionToken;\n  }\n\n  get openAISendByProxy(): boolean {\n    return (\n      this.options.openAIProxyUrl &&\n      this.openAISessionToken &&\n      this.openAISessionToken !== 'undefined'\n    );\n  }\n\n  get openAIModel(): string {\n    if (this.openAISendByProxy) {\n      if (this.options.openAIModel === DEFAULT_MODELS.apiModel) {\n        console.warn(\n          '[ ðŸ§™ hermes ] openAIModel is set to gpt-3.5-turbo, but use proxy type, so openAIModel is set to text-davinci-002-render-sha',\n        );\n        return (this.options.openAIModel = DEFAULT_MODELS.proxyModel);\n      }\n\n      return this.options.openAIModel || DEFAULT_MODELS.proxyModel;\n    }\n    return this.options.openAIModel || DEFAULT_MODELS.apiModel;\n  }\n\n  get openAIOptions(): ChatGPTAPIOptions['completionParams'] {\n    if (!this.openAIModel) throw new Error('openAIModel is not set');\n\n    return {\n      temperature: 0,\n      top_p: 0.4,\n      stop: ['###'],\n      model: this.openAIModel,\n      max_tokens: this.options.openAIMaxTokens,\n    };\n  }\n\n  get readFilesRoot(): string {\n    if (!this.options.readFilesRootName)\n      throw new Error('readFilesRootName is not set');\n    return path.join(process.cwd(), this.options.readFilesRootName);\n  }\n\n  get readFilesExtensions(): string[] {\n    if (!this.options.readFileExtensions)\n      throw new Error('readFileExtensions is not set');\n    return this.options.readFileExtensions.split(',');\n  }\n\n  get readFileType(): ReadTypeEnum {\n    if (!this.options.readType) throw new Error('readType is not set');\n    return this.options.readType;\n  }\n\n  get openAIPrompt(): string {\n    const { openAIPrompt } = this.options;\n\n    if (!openAIPrompt) return '';\n\n    const filePaths = openAIPrompt.split(',');\n\n    const filesContent = filePaths\n      .filter(\n        (filePath) => fs.existsSync(filePath) && fs.statSync(filePath).isFile(),\n      )\n      .map((filePath) => fs.readFileSync(filePath.trim(), 'utf-8'))\n      .join('\\n');\n\n    return filesContent\n      ? `Note here is context that you need understand: ${filesContent}.`\n      : openAIPrompt;\n  }\n\n  private convertProcessEnvToUserOptions(\n    processEnv: NodeJS.ProcessEnv,\n  ): IUserOptions {\n    return {\n      debug: process.env.DEBUG === 'true',\n      securityRegex: process.env.SECURITY_REGEX || '',\n      openAIKey: processEnv.OPENAI_API_KEY,\n      openAISessionToken: processEnv.OPENAI_SESSION_TOKEN,\n      openAIProxyUrl:\n        processEnv.OPENAI_PROXY_URL || this.userOptionsDefault.openAIProxyUrl,\n      openAIModel:\n        processEnv.OPENAI_MODEL || this.userOptionsDefault.openAIModel,\n      openAIMaxTokens: Number(\n        processEnv.OPENAI_MAX_TOKENS || this.userOptionsDefault.openAIMaxTokens,\n      ),\n      /**\n       * Read file options\n       */\n      readType:\n        (processEnv.READ_TYPE as ReadTypeEnum) ||\n        this.userOptionsDefault.readType,\n      readGitStatus:\n        processEnv.READ_GIT_STATUS || this.userOptionsDefault.readGitStatus,\n      readFilesRootName:\n        processEnv.READ_FILES_ROOT_NAME ||\n        this.userOptionsDefault.readFilesRootName,\n      readFileExtensions:\n        processEnv.READ_FILE_EXTENSIONS ||\n        this.userOptionsDefault.readFileExtensions,\n      /**\n       * Test file options\n       */\n      testFileType:\n        processEnv.TEST_FILE_TYPE || this.userOptionsDefault.testFileType,\n      testFileDirName:\n        processEnv.TEST_FILE_DIR_NAME ||\n        this.userOptionsDefault.testFileDirName,\n      /**\n       * Review options\n       */\n      reviewReportWebhook: processEnv.REVIEW_REPORT_WEBHOOK,\n      /**\n       * Translate options\n       */\n      translate: processEnv.TRANSLATE || this.userOptionsDefault.translate,\n    };\n  }\n\n  public securityPrompt(prompt: string): string {\n    if (!this.options.securityRegex) return prompt;\n\n    const regex = new RegExp(this.options.securityRegex, 'gi');\n\n    return prompt.replace(regex, 'REMOVED');\n  }\n\n  public init(userOptions: IUserOptions = {}) {\n    config();\n    config({ path: path.join(process.cwd(), '.env.local') });\n    const envUserOptions = this.convertProcessEnvToUserOptions(process.env);\n\n    if (process.env.DEBUG) {\n      console.log('envUserOptions: ', envUserOptions);\n      console.log('userOptions: ', userOptions);\n    }\n\n    this.options = Object.assign(\n      {},\n      this.userOptionsDefault,\n      envUserOptions,\n      userOptions,\n    );\n  }\n}\n\nexport const userOptions = new UserOptionsClass();\n\nexport const codeBlocksRegex = /```([\\s\\S]*?)```/g;\n\nexport const codeBlocksMdSymbolRegex = /```(\\w?)*/g;\n\nexport const reviewFileName = '.hermes_review.md';\n","import { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nexport const getFileNameByPath = (filePath: string) =>\n  filePath && path.basename(filePath, path.extname(filePath));\n\nexport const getUserEmail = () => {\n  const output = execSync('git config user.email').toString().trim();\n  return output;\n};\n\nexport const deleteFileSync = (filePath: string) => {\n  if (!fs.existsSync(filePath)) return;\n  fs.unlinkSync(filePath);\n};\n\nexport const makeDirExist = (dirPath: string) => {\n  if (fs.existsSync(dirPath)) return;\n  fs.mkdirSync(dirPath, { recursive: true });\n};\n\nexport const getFileNameToCamelCase = (\n  fileName: string,\n  isFirstUpper = false,\n) => {\n  if (!fileName) return '';\n  if (fileName.indexOf('-') === -1) {\n    return isFirstUpper\n      ? fileName.slice(0, 1).toUpperCase() + fileName.slice(1)\n      : fileName.slice(0, 1).toLowerCase() + fileName.slice(1);\n  }\n\n  fileName\n    .split('-')\n    .map((word, index) => {\n      if (index !== 0) {\n        return `${word.slice(0, 1).toUpperCase()}${word.slice(1)}`;\n      }\n\n      return isFirstUpper\n        ? word.slice(0, 1).toUpperCase()\n        : word.slice(0, 1).toLowerCase();\n    })\n    .join('');\n};\n\nexport * from './modifier/simply-result';\n","import {\n  codeBlocksMdSymbolRegex,\n  codeBlocksRegex,\n  reviewFileName,\n} from 'src/utilities/constant';\n\nexport const replaceCodeBlock = (\n  data: string,\n  placeholder: string = `check your local __${reviewFileName}__`,\n) => {\n  return data.replace(codeBlocksRegex, placeholder);\n};\n\nexport const getAllCodeBlock = (data: string): string => {\n  const codeBlocks = data.match(codeBlocksRegex);\n  return codeBlocks\n    ? codeBlocks\n        ?.map((t) =>\n          codeBlocksMdSymbolRegex.test(t)\n            ? t.replace(codeBlocksMdSymbolRegex, '')\n            : t,\n        )\n        .join('')\n    : data;\n};\n\nexport const simplyReviewData = (data: string) => {\n  return replaceCodeBlock(data)\n    .replace(/'/g, '')\n    .replace(/`/g, '__')\n    .replace(/\\n/g, '\\\\r');\n};\n","function getConflictResult(\n  sourceContent: string,\n  targetContent: string,\n): string {\n  const removeStartAndEndEmptyLine = (content: string): string[] => {\n    const lines = content.split('\\n');\n    let start = 0;\n    let end = lines.length - 1;\n    return lines.filter((line, index) => {\n      if (line.trim() === '' && index === start) {\n        start += 1;\n        return false;\n      }\n      if (line.trim() === '' && index === end) {\n        end -= 1;\n        return false;\n      }\n      return true;\n    });\n  };\n\n  const findFirstNotSameLineNumber = (\n    sourceLines: string[],\n    targetLines: string[],\n  ): number => {\n    let i = 0;\n    for (; i < sourceLines.length && i < targetLines.length; i++) {\n      if (sourceLines[i] !== targetLines[i]) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  const findReverseSameLinesLength = (\n    sourceLines: string[],\n    targetLines: string[],\n  ): number => {\n    let i = 0;\n    const sourceLinesReverse = sourceLines.slice().reverse();\n    const targetLinesReverse = targetLines.slice().reverse();\n\n    for (\n      ;\n      i < sourceLinesReverse.length && i < targetLinesReverse.length;\n      i++\n    ) {\n      if (sourceLinesReverse[i] !== targetLinesReverse[i]) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  const sourceLines = removeStartAndEndEmptyLine(sourceContent);\n  const targetLines = removeStartAndEndEmptyLine(targetContent);\n\n  if (sourceLines.join('\\n') === targetLines.join('\\n')) {\n    return sourceContent;\n  }\n\n  const firstNotSameLineNumber = findFirstNotSameLineNumber(\n    sourceLines,\n    targetLines,\n  );\n  const reverseSameLinesLength = findReverseSameLinesLength(\n    sourceLines,\n    targetLines,\n  );\n\n  const resultLines: string[] = [\n    ...sourceLines.slice(0, firstNotSameLineNumber),\n    '<<<<<<< HEAD',\n    ...sourceLines.slice(\n      firstNotSameLineNumber,\n      sourceLines.length - reverseSameLinesLength,\n    ),\n    '=======',\n    ...targetLines.slice(\n      firstNotSameLineNumber,\n      targetLines.length - reverseSameLinesLength,\n    ),\n    '>>>>>>> Incoming',\n    ...sourceLines.slice(sourceLines.length - reverseSameLinesLength),\n  ];\n\n  return resultLines.join('\\n');\n}\n\nexport default getConflictResult;\n","import { AbortController } from 'abort-controller';\nimport chalk from 'chalk';\nimport {\n  ChatGPTAPI,\n  ChatGPTUnofficialProxyAPI,\n  ChatMessage,\n  SendMessageOptions,\n} from 'chatgpt';\nimport ora from 'ora';\nimport { userOptions as options } from 'src/utilities/constant';\nimport { HermesPrompt } from 'src/utilities/opeai-talker/prompt';\n\nimport { handleContinueMessage, sendMessageWithRetry } from './send-message';\nimport { HermesTypeEnum, IReadFileResult } from '../types';\n\nexport class ChatgptProxyAPI {\n  private chatApi: ChatGPTUnofficialProxyAPI | ChatGPTAPI;\n  private parentMsg?: ChatMessage;\n\n  constructor() {\n    this.initChatApi();\n  }\n\n  get needPrintMsg(): boolean {\n    return true;\n  }\n\n  private initChatApi() {\n    if (process.env.DEBUG)\n      console.log(`openAI session token: \"${options.openAISessionToken}\"`);\n\n    console.log('[ ðŸ§™ hermes ] Using Model:', chalk.green(options.openAIModel));\n    if (!options.openAISendByProxy) {\n      this.chatApi = new ChatGPTAPI({\n        apiKey: options.openAIKey,\n        completionParams: options.openAIOptions,\n        debug: options.options.debug,\n      });\n      return;\n    }\n\n    this.chatApi = new ChatGPTUnofficialProxyAPI({\n      model: options.openAIModel,\n      accessToken: options.openAISessionToken,\n      apiReverseProxyUrl: options.options.openAIProxyUrl,\n    });\n  }\n\n  private generatePrompt(fileRes: IReadFileResult): string[] {\n    const hermesType = new HermesPrompt(options.hermesType);\n\n    return hermesType.generatePrompt(fileRes);\n  }\n\n  private isReviewPassed(msg: string): boolean {\n    if (options.hermesType !== HermesTypeEnum.Review) return true;\n    return /perfect!/gi.test(msg);\n  }\n\n  private oraStart(text = '', needPrintMsg = this.needPrintMsg): ora.Ora {\n    if (!needPrintMsg) return ora();\n\n    return ora({\n      text,\n      spinner: {\n        interval: 800,\n        frames: ['ðŸª„', 'ðŸ§™', 'ðŸª„', 'ðŸ§™', 'ðŸª„', 'ðŸ§™', 'ðŸª„', 'ðŸ§™'],\n      },\n    }).start();\n  }\n\n  private async sendPrompt(\n    prompt: string,\n    prevMsg?: Partial<ChatMessage>,\n  ): Promise<ChatMessage> {\n    const securityPrompt = options.securityPrompt(prompt);\n\n    if (!prevMsg) {\n      return await sendMessageWithRetry(() =>\n        this.chatApi.sendMessage(securityPrompt),\n      );\n    }\n\n    const reviewSpinner = this.oraStart();\n    const controller = new AbortController();\n    const signal = controller.signal;\n    const sendOptions: SendMessageOptions = {\n      ...prevMsg,\n      timeoutMs: 1000 * 60 * 5,\n      abortSignal: signal,\n      onProgress: (partialResponse) => {\n        reviewSpinner.text = partialResponse.text;\n      },\n    };\n\n    try {\n      let resMsg = await sendMessageWithRetry(() =>\n        this.chatApi.sendMessage(securityPrompt, sendOptions),\n      );\n\n      resMsg = await handleContinueMessage(resMsg, (msg, options) =>\n        this.chatApi.sendMessage(msg, { ...sendOptions, ...options }),\n      );\n\n      const isReviewPassed = this.isReviewPassed(resMsg.text);\n      const colorText = isReviewPassed\n        ? chalk.green(resMsg.text)\n        : chalk.yellow(resMsg.text);\n\n      reviewSpinner[isReviewPassed ? 'succeed' : 'fail'](\n        `[ ðŸ§™ hermes ] ${colorText} \\n `,\n      );\n\n      return resMsg;\n    } catch (error) {\n      reviewSpinner.fail(`[ ðŸ§™ hermes ] ${error.message} \\n `);\n      controller.abort();\n      throw error;\n    }\n  }\n\n  async sendFileRes(fileRes: IReadFileResult): Promise<string[]> {\n    const promptArray = this.generatePrompt(fileRes);\n    const [systemPrompt, ...codePrompts] = promptArray;\n    if (options.options.debug) {\n      console.log('[ ðŸ§™ hermes ] systemPrompt:', systemPrompt);\n      console.log(\n        '[ ðŸ§™ hermes ] codePrompts:',\n        codePrompts.length,\n        codePrompts,\n      );\n    }\n    if (!codePrompts.length) return [];\n\n    const msgArray: string[] = [];\n    let msg = this.parentMsg || (await this.sendPrompt(systemPrompt));\n\n    for (const prompt of codePrompts) {\n      msg = await this.sendPrompt(prompt, {\n        conversationId: msg?.conversationId,\n        parentMessageId: msg?.id,\n      });\n      msgArray.push(msg.text);\n      this.parentMsg = msg;\n    }\n\n    return msgArray;\n  }\n\n  public resetParentMsg() {\n    this.parentMsg = undefined;\n  }\n  async run(fileRes: IReadFileResult): Promise<string[]> {\n    const reviewSpinner = this.oraStart(\n      chalk.cyan(`[ ðŸ§™ hermes ] start ${options.hermesType} your code... \\n`),\n    );\n\n    return this.sendFileRes(fileRes)\n      .then((res) => {\n        reviewSpinner.succeed(\n          chalk.green(\n            `ðŸŽ‰ðŸŽ‰ [ ðŸ§™ hermes ] ${options.hermesType} code successfully! ðŸŽ‰ðŸŽ‰\\n `,\n          ),\n        );\n        return res;\n      })\n      .catch((error) => {\n        console.error('run error:', error);\n        reviewSpinner.fail(\n          chalk.red(\n            `ðŸ¤”ðŸ¤” [ ðŸ§™ hermes ] ${options.hermesType} your code failed! ðŸ¤”ðŸ¤”\\n`,\n          ),\n        );\n        return ['[ ðŸ§™ hermes ] call OpenAI API failed!'];\n      })\n      .finally(() => {\n        reviewSpinner.stop();\n      });\n  }\n}\n","import fs from 'fs';\nimport { userOptions } from 'src/utilities/constant';\nimport { readPromptFile } from 'src/utilities/reader/read-prompt-file';\n\nimport { ExtractCodePrompts } from '../extractor/extract-code-prompts';\nimport { HermesTypeEnum, IReadFileResult } from '../types';\n\nexport class HermesPrompt {\n  private hermesTypeMap: Record<\n    HermesTypeEnum,\n    (fileResult: IReadFileResult) => string[]\n  > = {\n    [HermesTypeEnum.Test]: (fileResult) => {\n      const fileContent =\n        fileResult.fileContent ||\n        fs.readFileSync(fileResult.filePath!, 'utf-8');\n      const testsPrompt = readPromptFile('tests.txt');\n      const basePrompt = `\n        ${testsPrompt}\n        ${userOptions.openAIPrompt || ''}\n      `;\n\n      const codePicker = new ExtractCodePrompts();\n\n      const codePrompts = codePicker.extractFunctionOrClassCodeArray({\n        ...fileResult,\n        fileContent,\n      });\n\n      return [basePrompt, ...codePrompts];\n    },\n    [HermesTypeEnum.Review]: (fileResult) => {\n      const fileContent =\n        fileResult.fileContent ||\n        fs.readFileSync(fileResult.filePath!, 'utf-8');\n      const reviewPrompt = readPromptFile('review.txt');\n      const basePrompt = `\n        ${reviewPrompt}\n        ${userOptions.openAIPrompt || ''}\n      `;\n\n      const codePicker = new ExtractCodePrompts();\n\n      const codePrompts = codePicker.extractFunctionOrClassCodeArray({\n        ...fileResult,\n        fileContent,\n      });\n\n      return [basePrompt, ...codePrompts];\n    },\n    [HermesTypeEnum.Translate]: (fileResult) => {\n      const fileContent =\n        fileResult.fileContent ||\n        fs.readFileSync(fileResult.filePath!, 'utf-8');\n      const readPrompt = readPromptFile('translate.txt');\n      const basePrompt = `\n        ${readPrompt}\n        - Target language: ${userOptions.options.translate}\n        ${userOptions.openAIPrompt || ''}\n      `;\n\n      return [basePrompt, fileContent];\n    },\n    [HermesTypeEnum.Create]: ({ prompts }) => {\n      if (!prompts) throw new Error('prompts is required for create');\n      const createPrompt = readPromptFile('create.txt');\n\n      return [\n        createPrompt,\n        ...[\n          `${userOptions.openAIPrompt}\\n${prompts.slice(0, 1)}`,\n          ...prompts.slice(1),\n        ],\n      ];\n    },\n    [HermesTypeEnum.Modify]: ({ prompts }) => {\n      const readPrompt = readPromptFile('modify.txt');\n\n      return [\n        readPrompt,\n        ...[\n          `${userOptions.openAIPrompt}\\n${prompts.slice(0, 1)}`,\n          ...prompts.slice(1),\n        ],\n      ];\n    },\n  };\n\n  constructor(private hermesType: HermesTypeEnum) {}\n\n  public generatePrompt(fileResult: IReadFileResult): string[] {\n    if (!fileResult)\n      throw new Error('File path is required for generatePrompt');\n    if (!this.hermesTypeMap[this.hermesType])\n      throw new Error('Invalid hermesType: ' + this.hermesType);\n\n    return this.hermesTypeMap[this.hermesType](fileResult);\n  }\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { ROOT_SRC_DIR_PATH } from 'src/utilities/constant';\n\nexport const readPromptFile = (fileName: string): string => {\n  const userLocalPath = path.join(process.cwd(), 'prompt', fileName);\n  if (fs.existsSync(userLocalPath)) {\n    return fs.readFileSync(userLocalPath, 'utf-8');\n  }\n\n  return fs.readFileSync(\n    path.join(ROOT_SRC_DIR_PATH, 'prompt', fileName),\n    'utf-8',\n  );\n};\n","import generate from '@babel/generator';\nimport { parse } from '@babel/parser';\nimport traverse, { NodePath } from '@babel/traverse';\nimport fs from 'fs';\nimport { userOptions } from 'src/utilities/constant';\nimport { IReadFileResult } from '../types';\n\nconst traverseFunc =\n  typeof traverse === 'function' ? traverse : (traverse as any).default;\nconst generateFunc =\n  typeof generate === 'function' ? generate : (generate as any).default;\n\nexport class ExtractCodePrompts {\n  private remainingCode: string[];\n  private remainingEndIndex;\n\n  constructor() {\n    this.remainingCode = [];\n    this.remainingEndIndex = 0;\n  }\n\n  private isFunctionOrClass(nodePath: NodePath | null): boolean {\n    if (!nodePath) return true;\n\n    const isVariableDeclarationFunction =\n      nodePath.isVariableDeclaration() &&\n      nodePath.node.declarations.some(\n        (d) =>\n          d.init &&\n          (d.init.type === 'FunctionExpression' ||\n            d.init.type === 'ArrowFunctionExpression'),\n      );\n\n    return (\n      nodePath.isFunction() ||\n      nodePath.isClass() ||\n      isVariableDeclarationFunction\n    );\n  }\n\n  public extractFunctionOrClassCodeArray({\n    fileContent,\n    filePath,\n  }: IReadFileResult): string[] {\n    try {\n      const ast = parse(fileContent, {\n        sourceType: 'module',\n        plugins: ['typescript', 'jsx'],\n      });\n\n      traverseFunc(ast, {\n        enter: (nodePath) => {\n          if (Number(nodePath.node.start) < this.remainingEndIndex) return;\n\n          if (!this.isFunctionOrClass(nodePath)) return;\n\n          this.remainingEndIndex = Number(nodePath.node.end);\n          const codeSnippet = generateFunc(nodePath.node).code;\n          this.remainingCode.push(codeSnippet);\n        },\n      });\n\n      return this.remainingCode;\n    } catch (e) {\n      if (userOptions.options?.debug) console.error('Babel parse error: ', e);\n      return [\n        fs.existsSync(filePath)\n          ? fs.readFileSync(filePath, 'utf-8')\n          : fileContent,\n      ];\n    }\n  }\n}\n","import { ChatMessage, SendMessageOptions } from 'chatgpt';\nimport {\n  OPENAI_MAX_CONTINUES,\n  OPENAI_MAX_RETRY,\n  codeBlocksMdSymbolRegex,\n} from 'src/utilities/constant';\n\nexport const sendMessageWithRetry = async (\n  sendMessage: () => Promise<ChatMessage>,\n  retries = OPENAI_MAX_RETRY,\n  retryDelay = 3000,\n): Promise<ChatMessage> => {\n  for (let retry = 0; retry < retries; retry++) {\n    try {\n      const res = await sendMessage();\n      return res;\n    } catch (error) {\n      if (error.statusCode === 401) {\n        throw error;\n      } else if (error.statusCode === 429) {\n        await new Promise((resolve) => setTimeout(resolve, retryDelay));\n      } else {\n        if (retry === retries) {\n          throw error;\n        }\n        console.log(\n          `[ ðŸ§™ hermes ] sendMessage failed, retrying... (${\n            retry + 1\n          }/${retries})`,\n        );\n      }\n    }\n  }\n  throw new Error('sendMessage failed after retries');\n};\n\nexport const handleContinueMessage = async (\n  message: ChatMessage,\n  sendMessage: (\n    messageText: string,\n    sendOptions?: SendMessageOptions,\n  ) => Promise<ChatMessage>,\n  maxContinueAttempts = OPENAI_MAX_CONTINUES,\n): Promise<ChatMessage> => {\n  let resMessage = message;\n  let continueAttempts = 0;\n\n  if ((resMessage.text.match(codeBlocksMdSymbolRegex) || []).length % 2 === 0) {\n    return resMessage;\n  }\n\n  while (continueAttempts < maxContinueAttempts) {\n    const continueMessage = 'continue';\n    const nextMessage = await sendMessage(continueMessage, {\n      conversationId: resMessage.conversationId,\n      parentMessageId: resMessage.id,\n    } as SendMessageOptions);\n\n    console.log(\n      `[ ðŸ§™ hermes ] continue message... (${\n        continueAttempts + 1\n      }/${maxContinueAttempts})`,\n    );\n\n    resMessage = {\n      ...resMessage,\n      ...nextMessage,\n      text: `${resMessage.text}${nextMessage.text}`,\n    };\n\n    if (nextMessage.text.match(codeBlocksMdSymbolRegex)?.length > 0) break;\n\n    continueAttempts++;\n  }\n  return resMessage;\n};\n","import { ChatgptProxyAPI } from 'src/utilities/opeai-talker';\nimport { IReadFileResult } from 'src/utilities/types';\n\nabstract class HermesBase {\n  public openai: ChatgptProxyAPI;\n\n  constructor() {\n    this.openai = new ChatgptProxyAPI();\n  }\n\n  abstract run(fileResult: IReadFileResult): Promise<string | string[]>;\n}\n\nexport default HermesBase;\n","import { exec } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport {\n  codeBlocksRegex,\n  reviewFileName,\n  userOptions,\n} from 'src/utilities/constant';\nimport {\n  deleteFileSync,\n  getUserEmail,\n  simplyReviewData,\n} from 'src/utilities/helpers';\n\nimport { INoticeTask, ISeatalkNoticeOptions } from './constant';\n\n/**\n * Webhook notifier\n * @param {string} channel The webhook channel\n * @param {string} userEmail The user email\n */\nclass WebhookNotifier {\n  private readonly userEmail: string;\n  private readonly channel: string;\n  private tasks: string[];\n\n  constructor({\n    channel = userOptions.options.reviewReportWebhook,\n    userEmail = '',\n  }: ISeatalkNoticeOptions = {}) {\n    this.tasks = [];\n\n    if (!channel) return;\n    this.userEmail = userEmail;\n    this.channel = channel;\n  }\n\n  /**\n   * Add a notice task\n   */\n  public addNoticeTask(task: INoticeTask) {\n    if (!task) return;\n\n    this.tasks.push(\n      `__${path.dirname(task.filePath).split('/').pop()}/${path.basename(\n        task.filePath,\n      )}__ \\\\râ€¢ ${task.message}`,\n    );\n  }\n\n  /**\n   * Publish all notices to the webhook channel\n   */\n  async publishNotice() {\n    if (!this.tasks?.length) return;\n    const content = this.tasks.join('\\\\r\\\\r\\\\n');\n    const reviewFilePath = `${path.join(process.cwd(), reviewFileName)}`;\n\n    deleteFileSync(reviewFilePath);\n\n    // Write the output text to a file if there are code blocks\n    if (codeBlocksRegex.test(content)) {\n      fs.writeFileSync(reviewFilePath, content, 'utf-8');\n    }\n\n    // If no channel is provided, log the content to the console\n    if (userOptions.options.debug) {\n      console.log(\n        'publishNotice: channel=%s, content=%s',\n        this.channel,\n        content,\n      );\n    }\n\n    if (!this.channel) return;\n\n    const data = `<mention-tag target=\\\\\"seatalk://user?email=${\n      this.userEmail || getUserEmail()\n    }\\\\\" />\\\\r\\\\r${simplyReviewData(content)}`;\n\n    try {\n      await exec(\n        `curl -i -X POST -H 'Content-Type: application/json' -d '{ \"tag\": \"markdown\", \"markdown\": {\"content\": \"${data}\"}}' ${this.channel}`,\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n\nexport default WebhookNotifier;\n","import { IReadFileResult } from 'src/utilities/types';\nimport WebhookNotifier from 'src/utilities/webhook';\n\nimport HermesBase from './base';\n\nclass HermesReview extends HermesBase {\n  private publishChannel: WebhookNotifier;\n\n  constructor() {\n    super();\n    this.publishChannel = new WebhookNotifier();\n  }\n\n  private async postAIMessage(\n    filePath: string,\n    message: string,\n  ): Promise<void> {\n    this.publishChannel.addNoticeTask({ filePath, message });\n  }\n\n  public async run(fileResult: IReadFileResult): Promise<string> {\n    this.openai.resetParentMessage();\n    const message = await this.openai.run(fileResult);\n    if (!message?.length) return;\n\n    const resMessage = message.join('\\n\\n---\\n\\n');\n    this.postAIMessage(fileResult.filePath!, resMessage);\n    return resMessage;\n  }\n\n  public publishNotice(): void {\n    this.publishChannel.publishNotice();\n  }\n}\n\nexport default HermesReview;\n","import { codeBlocksRegex } from 'src/utilities/constant';\nimport { getAllCodeBlock } from 'src/utilities/modifier/simply-result';\nimport { IReadFileResult } from 'src/utilities/types';\n\nimport HermesBase from './base';\n\nclass HermesCreate extends HermesBase {\n  public async run(fileResult: IReadFileResult): Promise<string[]> {\n    const message = await this.openai.run(fileResult);\n    if (!message?.length) return [];\n    if (!codeBlocksRegex.test(message.join(''))) return [];\n\n    const extractTestsCode = message.map((m) => getAllCodeBlock(m));\n\n    return extractTestsCode;\n  }\n}\n\nexport default HermesCreate;\n","import { codeBlocksRegex } from 'src/utilities/constant';\nimport { getAllCodeBlock } from 'src/utilities/modifier/simply-result';\nimport { IReadFileResult } from 'src/utilities/types';\n\nimport HermesBase from './base';\n\nclass HermesModify extends HermesBase {\n  public async run(fileResult: IReadFileResult): Promise<string[]> {\n    const message = await this.openai.run(fileResult);\n    if (!message?.length) return [];\n    if (!codeBlocksRegex.test(message.join(''))) return [];\n\n    const extractTestsCode = message.map((m) => getAllCodeBlock(m));\n\n    return extractTestsCode;\n  }\n}\n\nexport default HermesModify;\n","import fs from 'fs';\nimport { userOptions } from 'src/utilities/constant';\nimport { getAllCodeBlock } from 'src/utilities/modifier/simply-result';\nimport { IReadFileResult } from 'src/utilities/types';\nimport getConflictResult from 'src/utilities/writer/write-conflict';\n\nimport HermesBase from './base';\n\nclass HermesTranslate extends HermesBase {\n  private writeMessageToFile(\n    { filePath, fileContent }: IReadFileResult,\n    message: string,\n  ) {\n    try {\n      if (userOptions.options.debug) {\n        console.log('Write message to file:', filePath, message);\n      }\n      fs.writeFileSync(filePath, getConflictResult(fileContent, message));\n    } catch (error) {\n      console.error('Error writing message to file:', error);\n    }\n  }\n\n  public async run(fileResult: IReadFileResult): Promise<string> {\n    this.openai.resetParentMessage();\n    const message = await this.openai.run(fileResult);\n    if (!message?.length) return;\n\n    const extractCode = message.map((m) => getAllCodeBlock(m)).join('\\n');\n    this.writeMessageToFile(fileResult, extractCode);\n\n    return extractCode;\n  }\n}\n\nexport default HermesTranslate;\n","import inquirer from 'inquirer';\nimport ora from 'ora';\n\nimport CreateCodeGenerator from './code-generator';\nimport {\n  OptionType,\n  OptionTypeExtension,\n  messages,\n  optionShortcuts,\n} from './constant';\n\n/**\n * Hermes Create CLI\n */\nclass CreateCLI {\n  private codeGenerator: CreateCodeGenerator;\n\n  constructor() {\n    this.init();\n  }\n\n  private init() {\n    this.codeGenerator = new CreateCodeGenerator();\n  }\n  /**\n   * Prompt option selection from user\n   */\n  private async promptOptionSelection(): Promise<OptionType> {\n    const { option } = await inquirer.prompt([\n      {\n        type: 'list',\n        name: 'option',\n        message: messages.selectOption,\n        choices: [\n          OptionType.Models,\n          OptionType.Sections,\n          OptionType.Pages,\n          OptionType.Components,\n        ].map((option) => ({\n          name: `${option} (${optionShortcuts[option]})`,\n          value: option,\n        })),\n      },\n    ]);\n\n    return option as OptionType;\n  }\n\n  /**\n   * Prompt name from user\n   */\n  private async promptName(\n    option?: OptionType,\n    defaultName?: string,\n  ): Promise<string> {\n    const { name } = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'name',\n        default: defaultName || option ? 'index' : 'exampleModule',\n        message: option\n          ? messages.enterName(option)\n          : messages.enterDirectoryName,\n        validate: (input: string) => {\n          if (input.trim() === '') return messages.nameEmpty;\n          if (!/^[a-z]+(?:[A-Z][a-z]*)*$/.test(input))\n            return 'Name must be in camelCase.';\n          return true;\n        },\n      },\n    ]);\n\n    return name;\n  }\n\n  /**\n   * Prompt description from user\n   */\n  private async promptOptionDescription(option: OptionType): Promise<string> {\n    const { description } = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'description',\n        default: `Please input your requirements`,\n        message: messages.enterDescription(option),\n        validate: (input: string) =>\n          input.trim() !== '' || messages.descriptionEmpty,\n      },\n    ]);\n\n    return description;\n  }\n\n  /**\n   * Prompt continue or finish from user\n   */\n  private async promptContinueOrFinish(): Promise<boolean> {\n    const { action } = await inquirer.prompt([\n      {\n        type: 'list',\n        name: 'action',\n        message: messages.continueOrFinish,\n        choices: ['Continue', 'Finish'],\n      },\n    ]);\n\n    return action === 'Continue';\n  }\n\n  /**\n   * Start CLI\n   */\n  async start() {\n    // Prompt user for a directory name\n    let continuePrompt = true;\n\n    let dirName;\n    // If user says yes, prompt for options and create a file\n    while (continuePrompt) {\n      const selectedOption = await this.promptOptionSelection();\n      dirName = await this.promptName(undefined, dirName);\n      const name = await this.promptName(selectedOption);\n      const description = await this.promptOptionDescription(selectedOption);\n      const spinner = ora('[ ðŸ§™ hermes ] Processing...').start();\n\n      this.codeGenerator.setOptions({\n        option: selectedOption,\n        name,\n        dirName,\n        description,\n      });\n\n      await this.codeGenerator.generator();\n\n      spinner.stop();\n      continuePrompt = await this.promptContinueOrFinish();\n    }\n  }\n}\n\nexport { OptionType, OptionTypeExtension };\nexport default CreateCLI;\n","import fs from 'fs';\nimport path from 'path';\nimport { HermesCreate } from 'src/hermes';\nimport { userOptions } from 'src/utilities/constant';\nimport { getFileNameToCamelCase, makeDirExist } from 'src/utilities/helpers';\nimport { readPromptFile } from 'src/utilities/reader/read-prompt-file';\nimport getConflictResult from 'src/utilities/writer/write-conflict';\n\nimport { IOptionCreated, OptionType, OptionTypeExtension } from './constant';\n\ninterface IWriteFileOptions {\n  fileName: string;\n  fileContent: string;\n  optionType: OptionType;\n  needCreateDir?: boolean;\n  rootDirPath?: string;\n}\n\nclass CreateCodeGenerator {\n  private option: OptionType;\n  private description: string;\n  private dirName: string;\n  private name: string;\n  private hermes: HermesCreate;\n\n  constructor() {\n    this.init();\n  }\n\n  private init() {\n    this.hermes = new HermesCreate();\n  }\n\n  private getPrompts() {\n    const { option, description, dirName, name } = this;\n    const basePrompts = [\n      `${readPromptFile(`create-${option}.txt`)}\n            Please note is's modelName is \"${dirName}${getFileNameToCamelCase(\n        name,\n        true,\n      )}\", and reply \"${option}\" code by following requirements: ${description}.\n          `,\n    ];\n    if (option === OptionType.Models) {\n      basePrompts.push(\n        `${readPromptFile(`create-${OptionType.Services}.txt`)}\n            Note that you should consider the method name and relationship between the \"${\n              OptionType.Models\n            }\" that you reply before.\n            Please reply \"${\n              OptionType.Services\n            }\" code by following requirements: ${description}.\n          `,\n      );\n      basePrompts.push(\n        `${readPromptFile(`create-${OptionType.Mock}.txt`)}\n            Note that you should consider the requests api path and relationship between the \"${\n              OptionType.Services\n            }\" that you reply before.\n            Please reply \"${\n              OptionType.Mock\n            }\" code by following requirements: ${description}.\n          `,\n      );\n    }\n    return basePrompts;\n  }\n\n  private writeFile(options: IWriteFileOptions) {\n    const {\n      fileName,\n      fileContent,\n      needCreateDir,\n      optionType,\n      rootDirPath = '',\n    } = options;\n    const dirPath =\n      rootDirPath ||\n      path.join(\n        process.cwd(),\n        userOptions.options.readFilesRootName,\n        optionType,\n        needCreateDir ? getFileNameToCamelCase(this.dirName, true) : '',\n      );\n    makeDirExist(dirPath);\n    const filePath = path.join(\n      dirPath,\n      `${fileName}.${OptionTypeExtension[optionType]}`,\n    );\n\n    const existFileContent =\n      fs.existsSync(filePath) && fs.readFileSync(filePath, 'utf-8');\n    fs.writeFileSync(\n      filePath,\n      existFileContent\n        ? getConflictResult(existFileContent, fileContent)\n        : fileContent,\n    );\n  }\n\n  private handleModelsOption(dirName: string, name: string, message: string[]) {\n    const [modelContent, serviceContent, mockContent] = message;\n    const fileName = `${dirName}${getFileNameToCamelCase(name, true)}`;\n    this.writeFile({\n      fileName,\n      fileContent: modelContent,\n      needCreateDir: false,\n      optionType: OptionType.Models,\n    });\n    this.writeFile({\n      fileName,\n      fileContent: serviceContent,\n      needCreateDir: false,\n      optionType: OptionType.Services,\n    });\n    this.writeFile({\n      fileName,\n      fileContent: mockContent,\n      rootDirPath: path.join(process.cwd(), OptionType.Mock),\n      optionType: OptionType.Mock,\n    });\n  }\n\n  setOptions(options: IOptionCreated) {\n    this.option = options.option;\n    this.description = options.description;\n    this.dirName = options.dirName;\n    this.name = options.name;\n  }\n\n  async generator() {\n    const prompts = this.getPrompts();\n    const message = await this.hermes.run({ prompts });\n    if (!message.length) return;\n\n    if ([OptionType.Models].includes(this.option)) {\n      this.handleModelsOption(this.dirName, this.name, message);\n      return;\n    }\n\n    let optionType = this.option;\n    if ([OptionType.Sections].includes(this.option)) {\n      optionType = OptionType.Pages;\n    }\n\n    this.writeFile({\n      fileName: this.name,\n      fileContent: message.join('\\n'),\n      needCreateDir: true,\n      optionType: optionType,\n    });\n  }\n}\n\nexport default CreateCodeGenerator;\n","export enum OptionType {\n  Components = 'components',\n  Pages = 'pages',\n  Sections = 'sections',\n  Models = 'models',\n  Services = 'services',\n  Mock = 'mock',\n}\n\nexport const OptionTypeExtension = {\n  [OptionType.Components]: 'tsx',\n  [OptionType.Pages]: 'tsx',\n  [OptionType.Sections]: 'tsx',\n  [OptionType.Models]: 'ts',\n  [OptionType.Services]: 'ts',\n  [OptionType.Mock]: 'ts',\n};\n\nexport const optionShortcuts = {\n  [OptionType.Models]: '1',\n  [OptionType.Sections]: '2',\n  [OptionType.Pages]: '3',\n  [OptionType.Components]: '4',\n};\n\nexport interface IOptionCreated {\n  option: OptionType;\n  description: string;\n  dirName: string;\n  name: string;\n}\n\nexport const messages = {\n  selectOption: 'Select an option:',\n  enterDirectoryName: 'Enter a name for module (Directory Name):',\n  enterName: (option: string) => `Enter a name for the ${option}:`,\n  nameEmpty: 'Name cannot be empty.',\n  enterDescription: (option: string) =>\n    `Enter a description for the ${option}:`,\n  descriptionEmpty: 'Description cannot be empty.',\n  continueOrFinish: 'Do you want to continue or finish?',\n};\n","import fs from 'fs';\nimport inquirer from 'inquirer';\nimport ora from 'ora';\nimport { HermesModify } from 'src/hermes';\nimport { IReadFileResult } from 'src/types';\nimport { userOptions } from 'src/utilities/constant';\nimport getConflictResult from 'src/utilities/writer/write-conflict';\n\nclass ModifyCLI {\n  private hermes: HermesModify;\n\n  constructor(private readFileResult: IReadFileResult[]) {\n    this.init();\n  }\n\n  private init() {\n    this.hermes = new HermesModify();\n  }\n\n  private async promptOptionDescription(): Promise<string> {\n    const { description } = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'description',\n        default: `Please fix bugs or optimize my code, and extract constant variable or enum variable. if the function is complexity, please chunk it. If it's functional component, use react hooks optimize some UI component or functions. And add comments with ${\n          userOptions.options.translate || 'en'\n        } language for complexity logic steps.`,\n        messages: `Please input your modify requirements`,\n        validate: (input: string) =>\n          input.trim() !== '' || 'Description cannot be empty.',\n      },\n    ]);\n\n    return description;\n  }\n\n  private async promptContinueOrFinish(): Promise<boolean> {\n    const { action } = await inquirer.prompt([\n      {\n        type: 'list',\n        name: 'action',\n        message: 'Do you want to continue or finish?',\n        choices: ['Continue', 'Finish'],\n      },\n    ]);\n\n    return action === 'Continue';\n  }\n\n  private writeFile(filePath: string, newContent: string) {\n    fs.writeFileSync(\n      filePath,\n      getConflictResult(fs.readFileSync(filePath, 'utf-8'), newContent),\n    );\n  }\n\n  private async runSingleFile(\n    fileResult: IReadFileResult,\n    continueTimes: number,\n  ) {\n    if (!fileResult?.filePath) throw new Error('File path is empty');\n\n    console.log(`[ ðŸ§™ hermes ] Start modify ${fileResult.filePath}...`);\n    const description = await this.promptOptionDescription();\n    const spinner = ora(`[ ðŸ§™ hermes ] Processing...`).start();\n\n    const prompts = [\n      continueTimes === 0\n        ? `My fileContent is: ${fileResult.fileContent}.`\n        : '',\n      `Please modify previous code by following requirements: ${description}`,\n    ];\n    const message = await this.hermes.run({\n      ...this.readFileResult,\n      prompts: [prompts.join('\\n')],\n    });\n    if (!message?.length) {\n      spinner.stop();\n      return;\n    }\n\n    this.writeFile(fileResult.filePath, message.join('\\n'));\n\n    spinner.stop();\n  }\n\n  async start() {\n    if (!this.readFileResult?.length) throw new Error('File path is empty');\n\n    let continuePrompt = true;\n    let continueTimes = 0;\n\n    while (continuePrompt) {\n      for (const fileResult of this.readFileResult) {\n        await this.runSingleFile(fileResult, continueTimes);\n      }\n\n      continuePrompt = await this.promptContinueOrFinish();\n      continueTimes += 1;\n    }\n  }\n}\n\nexport default ModifyCLI;\n","import fs from 'fs';\nimport ora from 'ora';\nimport path from 'path';\nimport { userOptions } from 'src/utilities/constant';\n\nimport ReadTestFilePathsByDirectory from './reader-directory';\nimport StagedFileReader from './reader-git-stage';\nimport { IReadFileResult, ReadTypeEnum } from '../types';\n\nclass ReadFiles {\n  private dirPath: string;\n  private fileExtensions: string[];\n\n  constructor({\n    dirPath = userOptions.readFilesRoot,\n    fileExtensions = userOptions.readFilesExtensions,\n  } = {}) {\n    this.dirPath = dirPath;\n    this.fileExtensions = fileExtensions;\n  }\n\n  readTypeMap: Record<ReadTypeEnum, () => IReadFileResult[]> = {\n    [ReadTypeEnum.Directory]: () => this.getTestFilePathByDir(),\n    [ReadTypeEnum.GitStage]: () => this.getTestFilePathByGit(),\n  };\n\n  private getTestFilePathByDir(): IReadFileResult[] {\n    const reader = new ReadTestFilePathsByDirectory();\n    return reader.getDirFiles(this.dirPath);\n  }\n\n  private getTestFilePathByGit(): IReadFileResult[] {\n    const reader = new StagedFileReader();\n    return reader.getStagedFiles();\n  }\n\n  private hasValidExtension(file: string): boolean {\n    const extension = path.extname(file);\n    if (!this.fileExtensions.length) return true;\n\n    return this.fileExtensions.some(\n      (ext) => ext === extension || ext === extension.slice(1),\n    );\n  }\n\n  private isTestFile(file: string): boolean {\n    const extension = path.extname(file);\n    const testFileType = userOptions.options.testFileType;\n    return file.endsWith(`.${testFileType}${extension}`);\n  }\n\n  public getFileResults(\n    readFileType = userOptions.readFileType,\n  ): IReadFileResult[] {\n    if (!this.readTypeMap[readFileType])\n      throw new Error('Invalid test file read type');\n\n    const readSpinner = ora({\n      text: 'ðŸª„ [ ðŸ§™ hermes ] Reading files...',\n    }).start();\n\n    try {\n      const fileResults = this.readTypeMap[readFileType]().filter(\n        ({ filePath: path }) =>\n          path && this.hasValidExtension(path) && !this.isTestFile(path),\n      );\n\n      if (userOptions.options.debug) {\n        console.log(\n          '[ ðŸ§™ hermes ] read files ===>',\n          fileResults.map((r) => r.filePath),\n        );\n      }\n\n      fileResults.length > 0\n        ? readSpinner.succeed(\n            'ðŸŒŸðŸŒŸ [ ðŸ§™ hermes ] read files successfully! ðŸŒŸðŸŒŸ',\n          )\n        : readSpinner.warn('ðŸ¤”ðŸ¤” [ ðŸ§™ hermes ] read no files! ðŸ¤”ðŸ¤”');\n      return fileResults;\n    } catch (error) {\n      readSpinner.fail(`[ ðŸ§™ hermes ] read files failed: ${error}`);\n      throw error;\n    }\n  }\n}\n\nexport default ReadFiles;\n","import fs from 'fs';\nimport path from 'path';\n\nimport { IReadFileResult } from '../types';\n\nclass ReadTestFilePathsByDirectory {\n  private getFilesInDirectory(dirPath: string): string[] {\n    return fs.readdirSync(dirPath);\n  }\n\n  private isDirectory(filePath: string): boolean {\n    return fs.statSync(filePath).isDirectory();\n  }\n\n  private getSubDirectoryFilePaths(filePath: string): IReadFileResult[] {\n    return this.getDirFiles(filePath);\n  }\n\n  private getFileContent(filePath: string): string {\n    return fs.readFileSync(filePath, 'utf-8');\n  }\n\n  public getDirFiles(dirPath: string): IReadFileResult[] {\n    if (!this.isDirectory(dirPath)) {\n      return [{ filePath: dirPath, fileContent: this.getFileContent(dirPath) }];\n    }\n\n    const filesPath = this.getFilesInDirectory(dirPath);\n\n    return filesPath.reduce((fileResult: IReadFileResult[], file: string) => {\n      const filePath = path.join(dirPath, file);\n\n      if (this.isDirectory(filePath)) {\n        const subDirFileResults = this.getSubDirectoryFilePaths(filePath);\n        return [...fileResult, ...subDirFileResults];\n      }\n\n      return [\n        ...fileResult,\n        { filePath, fileContent: this.getFileContent(filePath) },\n      ];\n    }, [] as IReadFileResult[]);\n  }\n}\n\nexport default ReadTestFilePathsByDirectory;\n","import { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { userOptions } from 'src/utilities/constant';\n\nimport GitDiffExtractor from '../extractor/extract-modify-funcs';\nimport { IReadFileResult } from '../types';\n\nclass StagedFileReader {\n  private stagedFiles: IReadFileResult[];\n\n  constructor() {\n    this.stagedFiles = this.readStagedFiles();\n  }\n\n  private readStagedFiles(): IReadFileResult[] {\n    const files = execSync('git diff --cached --name-status')\n      .toString()\n      .split('\\n')\n      .filter(Boolean);\n    const readRootName = userOptions.options.readFilesRootName;\n    const readGitStatus =\n      userOptions.options.readGitStatus?.split(',').map((el) => el.trim()) ||\n      [];\n\n    if (!readRootName) throw new Error('readFilesRootName is not set');\n    if (!readGitStatus.length) {\n      console.warn('readGitStatus is not set, no reading staged files');\n      return [];\n    }\n\n    return files.reduce<IReadFileResult[]>((acc, file) => {\n      const fileSplitArr = file.split('\\t');\n      const status = fileSplitArr[0].slice(0, 1);\n      const filePath = fileSplitArr.slice(-1)[0];\n      const fullPath = path.join(process.cwd(), filePath);\n\n      if (\n        !readGitStatus.includes(status) ||\n        !filePath.startsWith(`${readRootName}/`) ||\n        !fs.existsSync(fullPath)\n      ) {\n        return acc;\n      }\n\n      const contents = fs.readFileSync(fullPath, 'utf-8');\n\n      if (status !== 'M') {\n        return [...acc, { filePath: fullPath, fileContent: contents }];\n      }\n\n      const codeExtractor = new GitDiffExtractor();\n      const modifiedContents =\n        codeExtractor.extractModifiedFunction(fullPath, contents) || '';\n      return [\n        ...acc,\n        {\n          filePath: fullPath,\n          fileContent: modifiedContents,\n        },\n      ];\n    }, []);\n  }\n\n  public getStagedFiles(): IReadFileResult[] {\n    return this.stagedFiles;\n  }\n}\n\nexport default StagedFileReader;\n","import { execSync } from 'child_process';\n\nclass GitDiffExtractor {\n  private getGitDiffOutput(filePath: string): string {\n    return execSync(`git diff --cached ${filePath}`).toString();\n  }\n\n  private getModifiedLineNumbers(diffLines: string[]): number[] {\n    const modifiedLineNumbers: number[] = [];\n    let currentLineNumber = 0;\n\n    for (const line of diffLines) {\n      if (line.startsWith('@@ ')) {\n        const match = line.match(/\\+(\\d+)/);\n        if (match) {\n          currentLineNumber = parseInt(match[1], 10) - 1;\n        }\n      } else if (\n        line.startsWith('+') &&\n        !line.startsWith('++') &&\n        !line.startsWith('@@')\n      ) {\n        modifiedLineNumbers.push(currentLineNumber);\n        currentLineNumber++;\n      } else if (!line.startsWith('-')) {\n        currentLineNumber++;\n      }\n    }\n\n    return modifiedLineNumbers;\n  }\n\n  private extractCodeBlock(lines: string[], lineNumber: number): string | null {\n    let startLine = lineNumber;\n    let endLine = lineNumber;\n    const blockPattern =\n      /^\\s*(?:export\\s+)?(?:default\\s+)?(?:async\\s+)?(?:function\\b|class\\b|.*=>|\\(.*\\)\\s*=>|\\(\\s*\\)\\s*=>)/;\n    const classPattern = /^\\s*(?:export\\s+)?(?:default\\s+)?class\\b/;\n\n    while (startLine >= 0 && !lines[startLine].match(blockPattern)) {\n      startLine--;\n    }\n\n    if (lines[startLine] && lines[startLine].match(classPattern)) {\n      endLine = this.findClosingBrace(lines, startLine);\n    } else {\n      let openBraces = 0;\n\n      for (let i = startLine; i < lines.length; i++) {\n        const line = lines[i];\n        openBraces += this.countChar(line, '{');\n        openBraces -= this.countChar(line, '}');\n\n        if (openBraces === 0) {\n          endLine = i;\n          break;\n        }\n      }\n    }\n\n    if (startLine < 0 || endLine >= lines.length || !lines[startLine]) {\n      return null;\n    }\n\n    return lines.slice(startLine, endLine + 1).join('\\n');\n  }\n\n  private findClosingBrace(lines: string[], startLine: number): number {\n    let openBraces = 0;\n\n    for (let i = startLine; i < lines.length; i++) {\n      const line = lines[i];\n      openBraces += this.countChar(line, '{');\n      openBraces -= this.countChar(line, '}');\n\n      if (openBraces === 0) {\n        return i;\n      }\n    }\n\n    return lines.length - 1;\n  }\n\n  private countChar(line: string, char: string): number {\n    return line?.split(char).length - 1 || 0;\n  }\n\n  private isCodeBlockContainedInExistingBlocks(\n    codeBlock: string,\n    existingBlocks: string[],\n  ): boolean {\n    for (const existingBlock of existingBlocks) {\n      if (existingBlock.includes(codeBlock)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private addCodeBlockIfNotContained(blocks: string[], newBlock: string): void {\n    if (\n      !this.isCodeBlockContainedInExistingBlocks(newBlock, blocks) &&\n      !blocks.includes(newBlock)\n    ) {\n      blocks.push(newBlock);\n    }\n  }\n\n  public extractModifiedFunction(\n    filePath: string,\n    contents: string,\n  ): string | null {\n    const diffOutput = this.getGitDiffOutput(filePath);\n    const diffLines = diffOutput?.split('\\n');\n    if (!diffLines || !contents) return null;\n\n    const modifiedLineNumbers = this.getModifiedLineNumbers(diffLines);\n    if (modifiedLineNumbers.length === 0) return null;\n\n    const lines = contents.split('\\n');\n    const extractedCodeBlocks: string[] = [];\n\n    for (const lineNumber of modifiedLineNumbers) {\n      const codeBlock = this.extractCodeBlock(lines, lineNumber);\n      if (codeBlock) {\n        this.addCodeBlockIfNotContained(extractedCodeBlocks, codeBlock);\n      }\n    }\n\n    return extractedCodeBlocks.join('\\n\\n');\n  }\n}\n\nexport default GitDiffExtractor;\n"],"mappings":"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","names":["fs","path","path","path","userOptions","execSync","fs","execSync","fs","sourceLines","targetLines","fs","fs","path","path","fs","fs","fs","fs","path","fs","fs","path","path","fs","fs","fs","ora","fs","path","path","fs","option","ora","fs","inquirer","ora","inquirer","fs","ora","ora","path","fs","path","execSync","fs","path","execSync","execSync","path","fs","path","ora"]}